version: "3.8"
services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    volumes:
      - type: bind
        source: ./api/src
        target: /app/src
    ports:
      - "3000:80"
      - "5678:5678"
      - "9229:9229"
    environment:
      - EMAIL_USERNAME=${EMAIL_USERNAME} 
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_DB=${DATABASE_DB}
      - RSA_KEY_PRIVATE=${RSA_KEY_PRIVATE}
      - RSA_PUBLIC_KEY=${RSA_PUBLIC_KEY}
      - API_URL_ORIGIN=${API_URL_ORIGIN}
      - OAUTH2_GOOGLE_ID=${OAUTH2_GOOGLE_ID}
      - OAUTH2_GOOGLE_SECRET=${OAUTH2_GOOGLE_SECRET}
#    networks:
#      - backend-net
    depends_on:
      - db
#   entrypoint: ["python3", "-m", "flask", "run", "--host=0.0.0.0", "-p", "80"]
  db:
    build:
      context: ./database
      dockerfile: Dockerfile.dev
    stdin_open: true
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD}
      - MYSQL_DATABASE=${DATABASE_DB}
    volumes:
    - type: volume
      source: dbdata
      target: /var/lib/mysql
    security_opt:
    - seccomp:unconfined
    ports:
      - 3308:3306
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
#    networks:
#      - backend-net
    depends_on:
     - db
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    stdin_open: true
    volumes:
      - type: bind
        source: ./client/src
        target: /app/src
    ports:
      - 4200:80
      - 49153:49153
    environment: 
      - DEBUG=*
      - NODE_ENV=development
    entrypoint:
      - node_modules/.bin/ng
      - serve 
      - --proxy-config 
      - proxy.config.json 
      - --port 
      - "80" 
      - --host 
      - "0.0.0.0"
      - --poll
    volumes:
      - type: bind
        source: ./client/src
        target: /app/src
#    networks:
#      - backend-net
    depends_on:
      - api
volumes:
  dbdata:
#networks:
#  backend-net:
#    driver: bridge
